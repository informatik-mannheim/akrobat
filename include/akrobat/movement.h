// Generated by gencpp from file akrobat/movement.msg
// DO NOT EDIT!


#ifndef AKROBAT_MESSAGE_MOVEMENT_H
#define AKROBAT_MESSAGE_MOVEMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace akrobat
{
template <class ContainerAllocator>
struct movement_
{
  typedef movement_<ContainerAllocator> Type;

  movement_()
    : commands()
    , walking_mode()
    , macro()  {
    }
  movement_(const ContainerAllocator& _alloc)
    : commands(_alloc)
    , walking_mode(_alloc)
    , macro(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _commands_type;
  _commands_type commands;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _walking_mode_type;
  _walking_mode_type walking_mode;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _macro_type;
  _macro_type macro;





  typedef boost::shared_ptr< ::akrobat::movement_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::akrobat::movement_<ContainerAllocator> const> ConstPtr;

}; // struct movement_

typedef ::akrobat::movement_<std::allocator<void> > movement;

typedef boost::shared_ptr< ::akrobat::movement > movementPtr;
typedef boost::shared_ptr< ::akrobat::movement const> movementConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::akrobat::movement_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::akrobat::movement_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace akrobat

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'akrobat': ['/home/patrice/catkin_ws/src/akrobat/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::akrobat::movement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::akrobat::movement_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::akrobat::movement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::akrobat::movement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::akrobat::movement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::akrobat::movement_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::akrobat::movement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "30667d9cc14274c065a72bbc55575091";
  }

  static const char* value(const ::akrobat::movement_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x30667d9cc14274c0ULL;
  static const uint64_t static_value2 = 0x65a72bbc55575091ULL;
};

template<class ContainerAllocator>
struct DataType< ::akrobat::movement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "akrobat/movement";
  }

  static const char* value(const ::akrobat::movement_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::akrobat::movement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64[] commands\n\
string walking_mode\n\
string macro\n\
\n\
";
  }

  static const char* value(const ::akrobat::movement_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::akrobat::movement_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.commands);
      stream.next(m.walking_mode);
      stream.next(m.macro);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct movement_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::akrobat::movement_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::akrobat::movement_<ContainerAllocator>& v)
  {
    s << indent << "commands[]" << std::endl;
    for (size_t i = 0; i < v.commands.size(); ++i)
    {
      s << indent << "  commands[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.commands[i]);
    }
    s << indent << "walking_mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.walking_mode);
    s << indent << "macro: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.macro);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AKROBAT_MESSAGE_MOVEMENT_H
